TODO:

* In `--watch-timestamps` mode, the database isn't being updated when a file's
   metadata (ctime and mtime) changes. Need to add an update mechanism and
   include a debug-mode message that reads: "size the same, no rehash, ctime & mtime updated"

* Currently, the database stores the complete metadata structure for each file,
  but only a few fields are actually being used. This results in storing many unnecessary
  null values. We need to create a custom structure that only includes the fields that are
   actively used. This will significantly reduce storage space consumption.

This translation preserves the technical meaning while making it sound natural in an office communication context. Would you like me to explain any specific technical terms I used in the translation?
* Add option to check not only modified file sizes but also creation and modification timestamps

* Connect xdiff library to tests

* test0014.c and test0015.c

* Create tests combining ignore and dry-run flags, don't forget about --include
  It would be good to repeat all tests from README with dry-run and ignore options

* Testing: Verify that --silent suppresses all output regardless of other options

* Review dry_run implementation throughout the codebase

* Add deep database verification test

* Review English language correctness in all message strings

* db_check_up_paths.c
    * Consider printing paths line by line instead of inline
    * Try removing if (!(rational_logger_mode & SILENT)) check and replace printf
      with slog(REGULAR|VERBOSE|TESTING,
    * Split file into blocks with status checks via if(SUCCESS == status)

    * Add completion messages at the end of each significant code block
      Like in detect_paths.c ending: slog(VERBOSE|TESTING,"Paths detected\n");

* Implement fuzzing tests

* Work on code coverage

* Design system tests to exercise all conditional report messages

* Add usage hints for --db-clean-ignored option when used with --ignore and --update

* Review entire README and place it in static char doc[] /* Program documentation. */

* Add verification that specified options work only with --compare

* Add --onlyAnotB option
* Add --onlyBnotA option
* Add --onlySHAdiffs option

* Unit tests - initial implementation:
	* Create tests using both relative and absolute paths

* Document all code

* Create man documentation

* Create flatpak and AppImage packages, note that author will assist with package creation for any OS if developers encounter difficulties
	https://unix.stackexchange.com/questions/740712/does-flatpak-support-command-line-applications

* Static build via GitHub

* Post program information on opennet

* Subscribe to precizer tag on Stack Overflow, create tag if needed and follow it

* ALL DONE
